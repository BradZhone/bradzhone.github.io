import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as i,e as t}from"./app-Coh1oo3x.js";const l={},d=t('<h1 id="torchrec-cn-embedding模块设计方案" tabindex="-1"><a class="header-anchor" href="#torchrec-cn-embedding模块设计方案"><span>torchrec cn_embedding模块设计方案</span></a></h1><h2 id="_1-目标" tabindex="-1"><a class="header-anchor" href="#_1-目标"><span>1.目标</span></a></h2><ul><li>实现对torchrec embedding/embeddingbag底层存储结构的替换，用于实现embedding table动态扩容，贴合实际业务场景</li><li>训练DLRM网络性能目标：吞吐550万，精度0.8025</li></ul><h2 id="_2-替换内容" tabindex="-1"><a class="header-anchor" href="#_2-替换内容"><span>2.替换内容</span></a></h2><ul><li>使用collection替换torch.nn.EmbeddingBag底层数据结构</li><li>需要实现： <ul><li>embeddingbag随机初始化</li><li>embedding的池化操作：sum（主要）/mean/max</li><li>forward()：向embeddingbag中传入一个/一批待查找key（Tensor），embeddingbag返回查询的embedding vector(一个/多个embedding做池化后得到的Tensor)</li><li>实现cpu和cncard端embedding table（attr: device, embeddingbag.to() : &quot;meta&quot;/&quot;cpu&quot;/&quot;cncard&quot;）</li><li>支持动态扩容，可新增相关类方法</li></ul></li></ul><h2 id="_3-替换方案" tabindex="-1"><a class="header-anchor" href="#_3-替换方案"><span>3.替换方案</span></a></h2><ul><li><p>编译collection为动态库，使用c++ 开发cn_embedding数据结构及对应方法，对齐原生embedingbag接口，新增动态扩容方法</p></li><li><p>使用pytorch官方接口自定义cn_embedding算子供python端调用</p></li><li><p>将torchrec/torchrec/modules/embedding_modules.py中的nn.Embedding(Bag)替换为CNEmbedding(Bag)</p></li><li><p>需要实现embedding的init(创建emb时，需要insert表条目，设定初始值)&amp;lookup(前向查表)&amp;update(反向更新表)</p></li><li><p>具体实现思路：</p><ul><li>c++: 使用collection封装为cn_embedding模块，提供CNEmbedding_C类接口，提供以下类方法 <ul><li>init：申请空间，从0至emb table size逐个插入k-v对，emb vector使用随机值</li><li>lookup：查表，用于前向</li><li>update：更新表，用于反向</li></ul></li><li>python：实现CNEmbedding(bag)的自定义层，继承nn.Module <ul><li>主要成员： <ul><li>emb_key：记录待查询key_id，用于后续更新embedding table</li><li>emb_vec：记录查询得到的emb vector，作为可训练参数，用于后续更新embedding teable</li><li>cn_emb_tbl：使用CNEmbedding_C接口创建的embedding table</li></ul></li><li>forward： <ul><li>从cn_emb_tbl中查表得到emb vectors,(若是embeddingbag，还需要对它们做pooling：sum/mean/max) 赋值并返回emb_vec</li></ul></li><li>backward： <ul><li>将返回的梯度更新到emb_vec，再cn_emb_tbl.update(emb_key, emb_vec)更新回embedding table</li></ul></li></ul></li></ul></li><li><p>实现方案：</p><ul><li>总体：使用pytorch扩展库的方式实现整个<code>cn_embedding</code>模块，c++端使用torch script、collection实现基本的嵌入表创建查找更新等操作，再封装为pytorch custom class向python端暴露接口；python端实现CNEmbedding和CNEmbeddingBag层，用于替换pytorch原生torch.nn.Embedding 和 torch.nn.EmbeddingBag。最后，再将Torchrec的数据结构EmbeddingBagCollection的嵌入层实现替换为CNEmbedding和CNEmbeddingBag</li></ul></li></ul><h2 id="_4-排期" tabindex="-1"><a class="header-anchor" href="#_4-排期"><span>4.排期</span></a></h2><ul><li>[x] 6.5 调研nn.EmbeddingBag各参数的作用，底层实现方法，如何做insert，对齐python接口，调研开发pytorch c++扩展库方法</li><li>[x] 6.6-6.7 实现CNEmbedding创建与初始化</li><li>[x] 6.8-6.9 实现lookup&amp;update</li><li>[x] 6.12-6.14 python端api开发</li><li>[x] 6.15-6.16 unittest &amp; dlrm网络测试(需适配框架后才能测试)</li></ul>',9),c=[d];function o(a,r){return n(),i("div",null,c)}const g=e(l,[["render",o],["__file","torchrec_cn_embedding_note.html.vue"]]),h=JSON.parse(`{"path":"/blogs/torchrec_cn_embedding_note.html","title":"torchrec cn_embedding模块设计方案","lang":"zh-CN","frontmatter":{"date":"2023-10-25T00:00:00.000Z","tag":["CNCard","Embedding"],"category":["推荐系统"],"description":"torchrec cn_embedding模块设计方案 1.目标 实现对torchrec embedding/embeddingbag底层存储结构的替换，用于实现embedding table动态扩容，贴合实际业务场景 训练DLRM网络性能目标：吞吐550万，精度0.8025 2.替换内容 使用collection替换torch.nn.Embeddin...","head":[["meta",{"property":"og:url","content":"https://bradzhone.github.io/blogs/torchrec_cn_embedding_note.html"}],["meta",{"property":"og:site_name","content":"BradZhone's Blog"}],["meta",{"property":"og:title","content":"torchrec cn_embedding模块设计方案"}],["meta",{"property":"og:description","content":"torchrec cn_embedding模块设计方案 1.目标 实现对torchrec embedding/embeddingbag底层存储结构的替换，用于实现embedding table动态扩容，贴合实际业务场景 训练DLRM网络性能目标：吞吐550万，精度0.8025 2.替换内容 使用collection替换torch.nn.Embeddin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"BradZhone"}],["meta",{"property":"article:tag","content":"CNCard"}],["meta",{"property":"article:tag","content":"Embedding"}],["meta",{"property":"article:published_time","content":"2023-10-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"torchrec cn_embedding模块设计方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BradZhone\\",\\"url\\":\\"https://github.com/BradZhone\\"}]}"]]},"headers":[{"level":2,"title":"1.目标","slug":"_1-目标","link":"#_1-目标","children":[]},{"level":2,"title":"2.替换内容","slug":"_2-替换内容","link":"#_2-替换内容","children":[]},{"level":2,"title":"3.替换方案","slug":"_3-替换方案","link":"#_3-替换方案","children":[]},{"level":2,"title":"4.排期","slug":"_4-排期","link":"#_4-排期","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.17,"words":652},"filePathRelative":"blogs/torchrec_cn_embedding_note.md","localizedDate":"2023年10月25日","excerpt":"\\n<h2>1.目标</h2>\\n<ul>\\n<li>实现对torchrec embedding/embeddingbag底层存储结构的替换，用于实现embedding table动态扩容，贴合实际业务场景</li>\\n<li>训练DLRM网络性能目标：吞吐550万，精度0.8025</li>\\n</ul>\\n<h2>2.替换内容</h2>\\n<ul>\\n<li>使用collection替换torch.nn.EmbeddingBag底层数据结构</li>\\n<li>需要实现：\\n<ul>\\n<li>embeddingbag随机初始化</li>\\n<li>embedding的池化操作：sum（主要）/mean/max</li>\\n<li>forward()：向embeddingbag中传入一个/一批待查找key（Tensor），embeddingbag返回查询的embedding vector(一个/多个embedding做池化后得到的Tensor)</li>\\n<li>实现cpu和cncard端embedding table（attr: device, embeddingbag.to() : \\"meta\\"/\\"cpu\\"/\\"cncard\\"）</li>\\n<li>支持动态扩容，可新增相关类方法</li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}`);export{g as comp,h as data};
