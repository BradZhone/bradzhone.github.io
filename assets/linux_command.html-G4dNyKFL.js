import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as a,e as n}from"./app-Coh1oo3x.js";const r={},i=n(`<h1 id="linux-快捷指令" tabindex="-1"><a class="header-anchor" href="#linux-快捷指令"><span>Linux 快捷指令</span></a></h1><h2 id="docker相关" tabindex="-1"><a class="header-anchor" href="#docker相关"><span>docker相关</span></a></h2><h2 id="查看相关" tabindex="-1"><a class="header-anchor" href="#查看相关"><span>查看相关</span></a></h2><table><thead><tr><th>command</th><th>定义</th><th>备注</th></tr></thead><tbody><tr><td>tee [-ai][--help][--version][文件...]</td><td>用于读取标准输入的数据，并将其内容输出成文件<br> -a或--append 　附加到既有文件的后面，而非覆盖它．<br> -i或--ignore-interrupts 　忽略中断信号。</td><td><strong>常用方法</strong>：<br>1. \`[command]</td></tr><tr><td>cpufreq-info</td><td>查看cpu状态：<br>apt-get install cpufrequtils<br>查看cpu模式：<br>cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor<br>调为性能模式：cpufreq-set -g performance<br>调为节能模式：cpufreq-set -g powersave</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="git相关" tabindex="-1"><a class="header-anchor" href="#git相关"><span>git相关</span></a></h2><table><thead><tr><th>command</th><th>定义</th><th>备注</th></tr></thead><tbody><tr><td>git remote -v</td><td>查询当前远程版本</td><td></td></tr><tr><td>git pull origin master</td><td>拉取远端master分支并合并最新代码</td><td></td></tr><tr><td>git fetch origin master:master1</td><td>拉取远端master分支最新代码到本地临时分支master1</td><td></td></tr><tr><td>git merge master</td><td>合并本地分支master到当前分支</td><td></td></tr><tr><td>git branch -D master</td><td>删除本地分支master</td><td></td></tr><tr><td>git merge origin/master</td><td>合并远端分支origin/master到当前本地分支</td><td></td></tr><tr><td>git reset --hard &lt;commit_id&gt;</td><td>回退到某一特定commit</td><td>&lt;commit_id&gt;可为<code>HEAD^</code>表示上一个版本，<code>HEAD~n</code>表示n次提交前；<br>回退并修改代码后可使用：<code>git push -f origin &lt;branch_name&gt;</code>强行推送到远端</td></tr><tr><td>git rebase [branch]</td><td>解决当前分支取<code>[branch]</code>分支间的冲突</td><td><code>[branch]</code>可为origin/branch直接与远端比较<br>之后可通过<code>git status</code>查看冲突的文件，进入后修改解决冲突后执行<code>git add .</code><br>再执行<code>git rebase --continue</code><br>没有冲突以后可推送到远端<code>git push -f origin &lt;branch_name&gt;</code></td></tr><tr><td>git config core.filemode false</td><td>git忽略文件权限修改</td><td>添加<code>--global</code>参数可作用于所有库</td></tr></tbody></table><h2 id="gitlab" tabindex="-1"><a class="header-anchor" href="#gitlab"><span>gitlab</span></a></h2><ul><li><p>为什么上传项目的时候会出现ssh无法连接的问题?</p><ul><li><p>因为项目的remote 设置为了ssh免密登录, 但是gitlab却没有设置当前上传项目的服务器的公钥,所以需要另外ssh-keygen 生成公私钥再拷贝到gitlab</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;xxx&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;xxx@xxx.com&quot;</span>
ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token number">123</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>若不想通过ssh连接, 则可以使用http每次输入密码登录</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 查看当前项目源的url</span>
<span class="token function">git</span> remote get-url origin
<span class="token comment"># 若是类似ssh://git@gitlab.software.xxx.com:2289/xxx/torchrec.git的输出,说明是用ssh连接的</span>
<span class="token comment"># 可改为http格式: http://gitlab.software.xxx.com/xxx/torchrec.git , 也可不要后面的.git</span>
<span class="token function">git</span> remote set-url origin http://gitlab.software.xxx.com/xxx/torchrec.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h2 id="gpu相关" tabindex="-1"><a class="header-anchor" href="#gpu相关"><span>GPU相关</span></a></h2><ul><li><p>查看driver：<code>nvidia-smi</code></p></li><li><p>设置可用GPU：<code>export CUDA_VISIBLE_DEVICES=0,1,2,3,4,5,6,7</code></p></li><li><p>查看topo（pcie or nvlink）：<code>nvidia-smi topo -m</code></p></li></ul>`,10),d=[i];function s(o,c){return e(),a("div",null,d)}const h=t(r,[["render",s],["__file","linux_command.html.vue"]]),g=JSON.parse('{"path":"/notes/linux_command.html","title":"Linux 快捷指令","lang":"zh-CN","frontmatter":{"date":"2024-03-05T00:00:00.000Z","tag":["Linux"],"category":["Linux"],"description":"Linux 快捷指令 docker相关 查看相关 git相关 gitlab 为什么上传项目的时候会出现ssh无法连接的问题? 因为项目的remote 设置为了ssh免密登录, 但是gitlab却没有设置当前上传项目的服务器的公钥,所以需要另外ssh-keygen 生成公私钥再拷贝到gitlab 若不想通过ssh连接, 则可以使用http每次输入密码登录...","head":[["meta",{"property":"og:url","content":"https://bradzhone.github.io/notes/linux_command.html"}],["meta",{"property":"og:site_name","content":"BradZhone\'s Blog"}],["meta",{"property":"og:title","content":"Linux 快捷指令"}],["meta",{"property":"og:description","content":"Linux 快捷指令 docker相关 查看相关 git相关 gitlab 为什么上传项目的时候会出现ssh无法连接的问题? 因为项目的remote 设置为了ssh免密登录, 但是gitlab却没有设置当前上传项目的服务器的公钥,所以需要另外ssh-keygen 生成公私钥再拷贝到gitlab 若不想通过ssh连接, 则可以使用http每次输入密码登录..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"BradZhone"}],["meta",{"property":"article:tag","content":"Linux"}],["meta",{"property":"article:published_time","content":"2024-03-05T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux 快捷指令\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-05T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BradZhone\\",\\"url\\":\\"https://github.com/BradZhone\\"}]}"]]},"headers":[{"level":2,"title":"docker相关","slug":"docker相关","link":"#docker相关","children":[]},{"level":2,"title":"查看相关","slug":"查看相关","link":"#查看相关","children":[]},{"level":2,"title":"git相关","slug":"git相关","link":"#git相关","children":[]},{"level":2,"title":"gitlab","slug":"gitlab","link":"#gitlab","children":[]},{"level":2,"title":"GPU相关","slug":"gpu相关","link":"#gpu相关","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.59,"words":778},"filePathRelative":"notes/linux_command.md","localizedDate":"2024年3月5日","excerpt":"\\n<h2>docker相关</h2>\\n<h2>查看相关</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>command</th>\\n<th>定义</th>\\n<th>备注</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>tee [-ai][--help][--version][文件...]</td>\\n<td>用于读取标准输入的数据，并将其内容输出成文件<br>  -a或--append 　附加到既有文件的后面，而非覆盖它．<br> -i或--ignore-interrupts 　忽略中断信号。</td>\\n<td><strong>常用方法</strong>：<br>1. `[command]</td>\\n</tr>\\n<tr>\\n<td>cpufreq-info</td>\\n<td>查看cpu状态：<br>apt-get install cpufrequtils<br>查看cpu模式：<br>cat /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor<br>调为性能模式：cpufreq-set -g performance<br>调为节能模式：cpufreq-set -g powersave</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td></td>\\n<td></td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{h as comp,g as data};
