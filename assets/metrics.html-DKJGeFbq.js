import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o,c as a,a as t,b as e,d,e as r}from"./app-Coh1oo3x.js";const c="/assets/v2-9bb7b658c3183432ef1aa2a7fc36ca54_720w-CDbb4gOa.webp",s={},p=r('<h1 id="metrics" tabindex="-1"><a class="header-anchor" href="#metrics"><span>Metrics</span></a></h1><h2 id="_0-goal" tabindex="-1"><a class="header-anchor" href="#_0-goal"><span>0. GOAL</span></a></h2><p>各类评估指标整理汇总，影响因素，提升方法</p><h2 id="_1-性能相关" tabindex="-1"><a class="header-anchor" href="#_1-性能相关"><span>1. 性能相关</span></a></h2><ol><li><p>基本概念</p><ul><li><table><thead><tr><th>名称</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>NVLink</td><td></td><td>节点内device连接方式之一</td></tr><tr><td>PCIe</td><td>高速串行计算机扩展总线标准</td><td>节点内device连接方式之一</td></tr><tr><td>Infinit Band (IB)</td><td></td><td>节点间device连接方式（多机）</td></tr><tr><td>ASIC</td><td>专用集成电路</td><td></td></tr><tr><td>FPGA</td><td>现场可编辑门阵列</td><td></td></tr><tr><td>SHArP</td><td>软硬结合的通信协议，实现在了NVIDIA Quantum HDR Switch的ASIC里</td><td>把聚合计算（reduce）从节点卸载到网络(交换机)中进行，相比tree和ring算法收发数据量大幅减少<img src="'+c+'" alt="img" loading="lazy">参考：https://www.zhihu.com/question/63219175/answer/206697974</td></tr></tbody></table></li></ul></li><li><p>性能指标</p><ul><li><table><thead><tr><th>名称</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>Size(Bytes)</td><td>数据大小</td><td></td></tr><tr><td>Description</td><td>测试描述（数据量*字节数）</td><td></td></tr><tr><td>Duration</td><td>耗时</td><td></td></tr><tr><td>Throughput(Gbps, fps, ...)</td><td>吞吐，每秒处理的图片/samples/文本/...数</td><td>一般用iter e2e时间来计算：$thoughput = \\frac{n_{card}*batchsize}{e2e_time}$</td></tr><tr><td>BusBW(Gbps)</td><td>带宽</td><td></td></tr><tr><td>扩展率</td><td>网络训练效率与卡数关系的衡量指标</td><td>$扩展率=\\frac{throghput_{n card}}{n*throughput_{1card}}*100%=\\frac{e2e_time_{1card}}{e2e_time_{ncard}}*100%$</td></tr></tbody></table></li></ul></li><li><p>性能测试</p></li></ol>',5),h=r("<li><p>影响模型性能的因素：cpu性能，gpu性能，io性能，pcie带宽，卡间/机间通信带宽</p><ul><li>分析工具：profiler，perf，top -c，注意各资源利用率</li><li>模型推理或者训练过程中，输入数据（例如一张图片）的加载，解码，预处理一般是cpu执行（dataloader和transforms）。任务下发到设备侧的过程也需要cpu执行。</li><li>瓶颈分析可以通过top -c看cpu利用率，profiler看设备侧执行kernel是否有空泡。</li><li>影响cpu发挥性能的参数有两个：CPU scaling_governor和CPU irqbalance，一个是工作频率，一个是中断请求处理。</li><li>磁盘io带宽影响数据读取的速度。</li><li>pcie带宽影响h2d和d2h的速度。</li><li>gpu做计算。显存与计算核间带宽，计算核的计算能力，<strong>运行<strong><strong>主频</strong></strong>影响device侧性能</strong>。（由于功耗核散热问题，当温度达到一定限度时，默认机器会自动降频，影响测试性能结果。多卡间计算耗时的不一致会导致扩展性问题）</li></ul></li>",1),u=t("p",null,[t("strong",null,"单卡：")],-1),_=t("li",null,[t("p",null,"功耗问题导致性能下降。处理方式：找静态功耗最低的卡进行测试。")],-1),m=t("li",null,[t("p",null,"某些算子性能不达标。通过profiler对比查看和竞品的耗时差异，导出gencase，优化算子性能。")],-1),g=t("p",null,"cpu下发慢，或者预处理加载数据问题。通过profiler查看cpu加载和预处理的耗时占整个推理的比例以及device侧是否有空泡。处理方式：更换更好的cpu，查看cpu是否充分利用，通过修改与数据加载相关的参数充分利用cpu（dataloader类的num_works多进程读取数据，pin_memory加速h2d）。pillow版本，使用pillow-simd进行预处理加速（主要的图像处理包：",-1),b=t("li",null,"CV2：opencv的python版本，应用较广",-1),f=t("li",null,"PIL：Python自带的图像处理库，但功能较简单",-1),y=t("li",null,"Pillow: 出发点在于PIL只支持python2.7，添加了一些新特性",-1),w={href:"https://zhuanlan.zhihu.com/p/616329044?utm_id=0",target:"_blank",rel:"noopener noreferrer"},I={href:"https://zhuanlan.zhihu.com/p/34837506",target:"_blank",rel:"noopener noreferrer"},v=t("li",null,[t("p",null,"gpu利用率低，profiler查看gpu执行算子是否有空泡，考虑增加batchsize，增加算子吞吐，提高gpu利用率。（查看带宽和ipu利用率，判断是io瓶颈或者计算瓶颈）")],-1),B=t("li",null,[t("p",null,"注意，真实数据和权值测试的性能有时不能用假数据进行模拟，因为某些情况下随机数据和真实数据分布不一致，算子设计没考虑，导致算子性能下降，或者引起功耗问题而降频。")],-1),P=t("li",null,[t("p",null,[t("strong",null,"单卡到多卡的扩展性影响因素：")]),t("ul",null,[t("li",null,"卡间带宽，卡间互联方式及带宽。还要考虑是不是会因为功耗墙问题导致某个卡降频而block掉其他卡的性能。（通过查看工作温度和功耗可以基本判断），处理方式，测试时锁频或者开大风扇")])],-1),z=t("li",null,[t("p",null,[t("strong",null,"多机通信：")]),t("ul",null,[t("li",null,"机间通信方式")])],-1),A=t("h2",{id:"_2-精度相关",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2-精度相关"},[t("span",null,"2. 精度相关")])],-1),k=t("ol",null,[t("li")],-1);function C(D,S){const n=i("ExternalLinkIcon");return o(),a("div",null,[p,t("ul",null,[h,t("li",null,[u,t("ol",null,[_,m,t("li",null,[g,t("ul",null,[b,f,y,t("li",null,[e("Pillow-SIMD：Pillow增强版本，约有5倍的增益，比CV2还要快（"),t("a",w,[e("参考"),d(n)]),e(" ；dataloader读取数据的"),t("a",I,[e("源码解析"),d(n)]),e(" ）")])])]),v,B])]),P,z]),A,k])}const G=l(s,[["render",C],["__file","metrics.html.vue"]]),N=JSON.parse(`{"path":"/notes/metrics.html","title":"Metrics","lang":"zh-CN","frontmatter":{"date":"2023-12-25T00:00:00.000Z","tag":["Metics"],"category":["DeepLearning"],"description":"Metrics 0. GOAL 各类评估指标整理汇总，影响因素，提升方法 1. 性能相关 基本概念 性能指标 性能测试 影响模型性能的因素：cpu性能，gpu性能，io性能，pcie带宽，卡间/机间通信带宽 分析工具：profiler，perf，top -c，注意各资源利用率 模型推理或者训练过程中，输入数据（例如一张图片）的加载，解码，预处理一般是c...","head":[["meta",{"property":"og:url","content":"https://bradzhone.github.io/notes/metrics.html"}],["meta",{"property":"og:site_name","content":"BradZhone's Blog"}],["meta",{"property":"og:title","content":"Metrics"}],["meta",{"property":"og:description","content":"Metrics 0. GOAL 各类评估指标整理汇总，影响因素，提升方法 1. 性能相关 基本概念 性能指标 性能测试 影响模型性能的因素：cpu性能，gpu性能，io性能，pcie带宽，卡间/机间通信带宽 分析工具：profiler，perf，top -c，注意各资源利用率 模型推理或者训练过程中，输入数据（例如一张图片）的加载，解码，预处理一般是c..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"BradZhone"}],["meta",{"property":"article:tag","content":"Metics"}],["meta",{"property":"article:published_time","content":"2023-12-25T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Metrics\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-12-25T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"BradZhone\\",\\"url\\":\\"https://github.com/BradZhone\\"}]}"]]},"headers":[{"level":2,"title":"0. GOAL","slug":"_0-goal","link":"#_0-goal","children":[]},{"level":2,"title":"1. 性能相关","slug":"_1-性能相关","link":"#_1-性能相关","children":[]},{"level":2,"title":"2. 精度相关","slug":"_2-精度相关","link":"#_2-精度相关","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":3.55,"words":1065},"filePathRelative":"notes/metrics.md","localizedDate":"2023年12月25日","excerpt":"\\n<h2>0. GOAL</h2>\\n<p>各类评估指标整理汇总，影响因素，提升方法</p>\\n<h2>1. 性能相关</h2>\\n<ol>\\n<li>\\n<p>基本概念</p>\\n<ul>\\n<li>\\n<table>\\n<thead>\\n<tr>\\n<th>名称</th>\\n<th>内容</th>\\n<th>备注</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>NVLink</td>\\n<td></td>\\n<td>节点内device连接方式之一</td>\\n</tr>\\n<tr>\\n<td>PCIe</td>\\n<td>高速串行计算机扩展总线标准</td>\\n<td>节点内device连接方式之一</td>\\n</tr>\\n<tr>\\n<td>Infinit Band (IB)</td>\\n<td></td>\\n<td>节点间device连接方式（多机）</td>\\n</tr>\\n<tr>\\n<td>ASIC</td>\\n<td>专用集成电路</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>FPGA</td>\\n<td>现场可编辑门阵列</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>SHArP</td>\\n<td>软硬结合的通信协议，实现在了NVIDIA Quantum HDR Switch的ASIC里</td>\\n<td>把聚合计算（reduce）从节点卸载到网络(交换机)中进行，相比tree和ring算法收发数据量大幅减少参考：https://www.zhihu.com/question/63219175/answer/206697974</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>性能指标</p>\\n<ul>\\n<li>\\n<table>\\n<thead>\\n<tr>\\n<th>名称</th>\\n<th>内容</th>\\n<th>备注</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Size(Bytes)</td>\\n<td>数据大小</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>Description</td>\\n<td>测试描述（数据量*字节数）</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>Duration</td>\\n<td>耗时</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>Throughput(Gbps, fps, ...)</td>\\n<td>吞吐，每秒处理的图片/samples/文本/...数</td>\\n<td>一般用iter e2e时间来计算：$thoughput = \\\\frac{n_{card}*batchsize}{e2e_time}$</td>\\n</tr>\\n<tr>\\n<td>BusBW(Gbps)</td>\\n<td>带宽</td>\\n<td></td>\\n</tr>\\n<tr>\\n<td>扩展率</td>\\n<td>网络训练效率与卡数关系的衡量指标</td>\\n<td>$扩展率=\\\\frac{throghput_{n card}}{n*throughput_{1card}}*100%=\\\\frac{e2e_time_{1card}}{e2e_time_{ncard}}*100%$</td>\\n</tr>\\n</tbody>\\n</table>\\n</li>\\n</ul>\\n</li>\\n<li>\\n<p>性能测试</p>\\n</li>\\n</ol>","autoDesc":true}`);export{G as comp,N as data};
